<?xml version="1.0" encoding="UTF-8"?>    
<b:beans xmlns="http://www.springframework.org/schema/security"    
    xmlns:b="http://www.springframework.org/schema/beans"    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">    
    
    <http pattern="/login.html" security="none" />  
      
    <http access-denied-page="/accessDenied.jsp"  
          entry-point-ref="authenticationEntryPoint">  
        <logout logout-url="/j_spring_security_logout"  
                         logout-success-url="/main/customLogin.do"  
                         invalidate-session="true" />  
            
<!--         <intercept-url pattern="/index.html" access="ROLE_ADMIN" />   -->
  
        <custom-filter  ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/>  
          
        <!-- 这里添加自己定义的AuthenticationFilter到FilterChain的FORM_LOGIN_FILTER位置 -->  
        <!-- 所以上面不需要定义form-login属性了 -->  
        <custom-filter ref="myAuthenticationFilter" position="FORM_LOGIN_FILTER"/>  
        <custom-filter  ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER" />  
          
        <session-management session-authentication-strategy-ref="sessionAuthenticationStrategy">  
        </session-management>  
    </http>  
      
    <b:bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">  
      <b:property name="sessionRegistry" ref="sessionRegistry" />  
      <b:property name="expiredUrl" value="/sessionExpired.jsp" />  
    </b:bean>  
  
    <!-- 在MyAuthenticationFilter中可以自定义数据的请求格式 -->      
    <b:bean id="myAuthenticationFilter"  
       class="com.picc.security.MyAuthenticationFilter">  
      <b:property name="authenticationManager" ref="authenticationManager" />  
      <b:property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy" />   
      <b:property name="usernameParameter" value="username"/>  
      <b:property name="passwordParameter" value="password"/>  
      <b:property name="filterProcessesUrl" value="/login.do" />  
      <b:property name="authenticationSuccessHandler">    
	  	<b:bean id="authenticationSuccessHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">  
			<b:property name="defaultTargetUrl" value="/index.html"/>  
		</b:bean>     
      </b:property>    
      <b:property name="authenticationFailureHandler">    
        <b:bean class="com.picc.security.MyAuthenticationFailureHandler">  
            <!-- 不能设置/WEB-INF下的jsp，会访问不到，虽然服务端Console不会打印错误信息 -->  
            <!-- 但是客户端也不会收到你指定的jsp信息 -->    
            <b:property name="defaultFailureUrl" value="/login.html"/>    
            <b:property name="forwardToDestination" value="true"/> 
        </b:bean>    
      </b:property>    
    </b:bean>  
      
     
      
    <!-- 若访问没有权限，自动跳到下面指定的页面 -->  
    <b:bean id="authenticationEntryPoint" class="com.picc.security.MyAuthenticationEntryPoint">  
    	<b:property name="useForward" value="true" />  
      <b:property name="loginFormUrl" value="/login.html" />   
    </b:bean>    
      
    <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，     
        我们的所有控制将在这三个类中实现，解释详见具体配置 -->    
    <b:bean id="myFilter" class="com.picc.security.MySecurityFilter">    
        <b:property name="authenticationManager" ref="authenticationManager" />    
        <b:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />    
        <b:property name="securityMetadataSource" ref="securityMetadataSource" />  
    </b:bean>    
      
    <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->    
    <authentication-manager alias="authenticationManager">    
        <authentication-provider user-service-ref="myUserDetailService">    
        <!--如果用户的密码采用加密的话  -->  
<!--         <password-encoder hash="md5"/>     -->
        </authentication-provider>    
    </authentication-manager>  
        
    <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->    
    <b:bean id="myUserDetailService" class="com.picc.security.MyUserDetailServiceImpl2" />  
        
    <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->    
    <b:bean id="myAccessDecisionManagerBean"    
        class="com.picc.security.MyAccessDecisionManager">    
    </b:bean>    
      
    <b:bean id="sessionAuthenticationStrategy"   
    class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">    
      <b:constructor-arg name="sessionRegistry" ref="sessionRegistry" />    
      <b:property name="maximumSessions" value="1" />  
      <b:property name="exceptionIfMaximumExceeded" value="false" />    
    </b:bean>    
    <b:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />    
      
    <!--资源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->    
    <b:bean id="securityMetadataSource"    
        class="com.picc.security.MySecurityMetadataSource" />    
 </b:beans>  